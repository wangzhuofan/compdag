// Generated by rstantools.  Do not edit by hand.

/*
    compdag is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    compdag is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with compdag.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_compDAG4_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 102> locations_array__ =
  {" (found before start of program)",
  " (in 'compDAG4', line 16, column 2 to column 11)",
  " (in 'compDAG4', line 16, column 11 to column 20)",
  " (in 'compDAG4', line 16, column 20 to column 29)",
  " (in 'compDAG4', line 16, column 29 to column 38)",
  " (in 'compDAG4', line 17, column 2 to column 21)",
  " (in 'compDAG4', line 18, column 2 to column 21)",
  " (in 'compDAG4', line 19, column 2 to column 21)",
  " (in 'compDAG4', line 20, column 2 to column 21)",
  " (in 'compDAG4', line 23, column 2 to column 20)",
  " (in 'compDAG4', line 23, column 20 to column 38)",
  " (in 'compDAG4', line 23, column 38 to column 56)",
  " (in 'compDAG4', line 23, column 56 to column 74)",
  " (in 'compDAG4', line 24, column 2 to column 19)",
  " (in 'compDAG4', line 24, column 19 to column 36)",
  " (in 'compDAG4', line 24, column 36 to column 53)",
  " (in 'compDAG4', line 24, column 53 to column 70)",
  " (in 'compDAG4', line 25, column 2 to column 18)",
  " (in 'compDAG4', line 58, column 2 to column 20)",
  " (in 'compDAG4', line 27, column 4 to column 20)",
  " (in 'compDAG4', line 26, column 16 to line 28, column 3)",
  " (in 'compDAG4', line 26, column 2 to line 28, column 3)",
  " (in 'compDAG4', line 30, column 4 to column 20)",
  " (in 'compDAG4', line 29, column 16 to line 31, column 3)",
  " (in 'compDAG4', line 29, column 2 to line 31, column 3)",
  " (in 'compDAG4', line 33, column 4 to column 20)",
  " (in 'compDAG4', line 32, column 16 to line 34, column 3)",
  " (in 'compDAG4', line 32, column 2 to line 34, column 3)",
  " (in 'compDAG4', line 36, column 4 to column 20)",
  " (in 'compDAG4', line 35, column 16 to line 37, column 3)",
  " (in 'compDAG4', line 35, column 2 to line 37, column 3)",
  " (in 'compDAG4', line 38, column 2 to column 19)",
  " (in 'compDAG4', line 39, column 2 to column 19)",
  " (in 'compDAG4', line 40, column 2 to column 19)",
  " (in 'compDAG4', line 41, column 2 to column 19)",
  " (in 'compDAG4', line 42, column 2 to column 23)",
  " (in 'compDAG4', line 59, column 17 to column 67)",
  " (in 'compDAG4', line 59, column 2 to column 67)",
  " (in 'compDAG4', line 45, column 2 to column 17)",
  " (in 'compDAG4', line 46, column 2 to column 17)",
  " (in 'compDAG4', line 47, column 2 to column 17)",
  " (in 'compDAG4', line 48, column 2 to column 17)",
  " (in 'compDAG4', line 49, column 17 to column 56)",
  " (in 'compDAG4', line 49, column 2 to column 56)",
  " (in 'compDAG4', line 50, column 17 to column 56)",
  " (in 'compDAG4', line 50, column 2 to column 56)",
  " (in 'compDAG4', line 51, column 17 to column 56)",
  " (in 'compDAG4', line 51, column 2 to column 56)",
  " (in 'compDAG4', line 52, column 17 to column 56)",
  " (in 'compDAG4', line 52, column 2 to column 56)",
  " (in 'compDAG4', line 54, column 4 to column 52)",
  " (in 'compDAG4', line 53, column 15 to line 55, column 3)",
  " (in 'compDAG4', line 53, column 2 to line 55, column 3)",
  " (in 'compDAG4', line 2, column 2 to column 19)",
  " (in 'compDAG4', line 3, column 2 to column 20)",
  " (in 'compDAG4', line 4, column 2 to column 20)",
  " (in 'compDAG4', line 5, column 2 to column 20)",
  " (in 'compDAG4', line 6, column 2 to column 20)",
  " (in 'compDAG4', line 7, column 2 to column 20)",
  " (in 'compDAG4', line 8, column 9 to column 11)",
  " (in 'compDAG4', line 8, column 12 to column 13)",
  " (in 'compDAG4', line 8, column 2 to column 18)",
  " (in 'compDAG4', line 9, column 9 to column 11)",
  " (in 'compDAG4', line 9, column 12 to column 13)",
  " (in 'compDAG4', line 9, column 2 to column 18)",
  " (in 'compDAG4', line 10, column 9 to column 11)",
  " (in 'compDAG4', line 10, column 12 to column 13)",
  " (in 'compDAG4', line 10, column 2 to column 18)",
  " (in 'compDAG4', line 11, column 9 to column 11)",
  " (in 'compDAG4', line 11, column 12 to column 13)",
  " (in 'compDAG4', line 11, column 2 to column 18)",
  " (in 'compDAG4', line 12, column 9 to column 11)",
  " (in 'compDAG4', line 12, column 12 to column 13)",
  " (in 'compDAG4', line 12, column 2 to column 18)",
  " (in 'compDAG4', line 13, column 2 to column 11)",
  " (in 'compDAG4', line 17, column 17 to column 19)",
  " (in 'compDAG4', line 17, column 10 to column 12)",
  " (in 'compDAG4', line 18, column 17 to column 19)",
  " (in 'compDAG4', line 18, column 10 to column 12)",
  " (in 'compDAG4', line 19, column 17 to column 19)",
  " (in 'compDAG4', line 19, column 10 to column 12)",
  " (in 'compDAG4', line 20, column 17 to column 19)",
  " (in 'compDAG4', line 20, column 10 to column 12)",
  " (in 'compDAG4', line 23, column 9 to column 11)",
  " (in 'compDAG4', line 23, column 12 to column 14)",
  " (in 'compDAG4', line 23, column 27 to column 29)",
  " (in 'compDAG4', line 23, column 30 to column 32)",
  " (in 'compDAG4', line 23, column 45 to column 47)",
  " (in 'compDAG4', line 23, column 48 to column 50)",
  " (in 'compDAG4', line 23, column 63 to column 65)",
  " (in 'compDAG4', line 23, column 66 to column 68)",
  " (in 'compDAG4', line 24, column 9 to column 11)",
  " (in 'compDAG4', line 24, column 12 to column 13)",
  " (in 'compDAG4', line 24, column 26 to column 28)",
  " (in 'compDAG4', line 24, column 29 to column 30)",
  " (in 'compDAG4', line 24, column 43 to column 45)",
  " (in 'compDAG4', line 24, column 46 to column 47)",
  " (in 'compDAG4', line 24, column 60 to column 62)",
  " (in 'compDAG4', line 24, column 63 to column 64)",
  " (in 'compDAG4', line 25, column 9 to column 11)",
  " (in 'compDAG4', line 25, column 12 to column 13)",
  " (in 'compDAG4', line 58, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_compDAG4 final : public model_base_crtp<model_compDAG4> {
private:
  int n;
  int p1;
  int p2;
  int p3;
  int p4;
  int p5;
  Eigen::Matrix<double,-1,-1> y1_data__;
  Eigen::Matrix<double,-1,-1> y2_data__;
  Eigen::Matrix<double,-1,-1> y3_data__;
  Eigen::Matrix<double,-1,-1> y4_data__;
  Eigen::Matrix<double,-1,-1> y5_data__;
  double mu5;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> y1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> y2{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> y3{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> y4{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> y5{nullptr, 0, 0};
public:
  ~model_compDAG4() {}
  model_compDAG4(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_compDAG4_namespace::model_compDAG4";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 53;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 53;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "p1", "int",
        std::vector<size_t>{});
      p1 = std::numeric_limits<int>::min();
      current_statement__ = 54;
      p1 = context__.vals_i("p1")[(1 - 1)];
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "p1", p1, 0);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "p2", "int",
        std::vector<size_t>{});
      p2 = std::numeric_limits<int>::min();
      current_statement__ = 55;
      p2 = context__.vals_i("p2")[(1 - 1)];
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__, "p2", p2, 0);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "p3", "int",
        std::vector<size_t>{});
      p3 = std::numeric_limits<int>::min();
      current_statement__ = 56;
      p3 = context__.vals_i("p3")[(1 - 1)];
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "p3", p3, 0);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "p4", "int",
        std::vector<size_t>{});
      p4 = std::numeric_limits<int>::min();
      current_statement__ = 57;
      p4 = context__.vals_i("p4")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "p4", p4, 0);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "p5", "int",
        std::vector<size_t>{});
      p5 = std::numeric_limits<int>::min();
      current_statement__ = 58;
      p5 = context__.vals_i("p5")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "p5", p5, 0);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("y1", "p1", p1);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("y1", "n", n);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "y1", "double",
        std::vector<size_t>{static_cast<size_t>(p1), static_cast<size_t>(n)});
      y1_data__ = Eigen::Matrix<double,-1,-1>::Constant(p1, n,
                    std::numeric_limits<double>::quiet_NaN());
      new (&y1) Eigen::Map<Eigen::Matrix<double,-1,-1>>(y1_data__.data(), p1,
        n);
      {
        std::vector<local_scalar_t__> y1_flat__;
        current_statement__ = 61;
        y1_flat__ = context__.vals_r("y1");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 61;
          for (int sym2__ = 1; sym2__ <= p1; ++sym2__) {
            current_statement__ = 61;
            stan::model::assign(y1, y1_flat__[(pos__ - 1)],
              "assigning variable y1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 61;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 62;
      stan::math::validate_non_negative_index("y2", "p2", p2);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("y2", "n", n);
      current_statement__ = 64;
      context__.validate_dims("data initialization", "y2", "double",
        std::vector<size_t>{static_cast<size_t>(p2), static_cast<size_t>(n)});
      y2_data__ = Eigen::Matrix<double,-1,-1>::Constant(p2, n,
                    std::numeric_limits<double>::quiet_NaN());
      new (&y2) Eigen::Map<Eigen::Matrix<double,-1,-1>>(y2_data__.data(), p2,
        n);
      {
        std::vector<local_scalar_t__> y2_flat__;
        current_statement__ = 64;
        y2_flat__ = context__.vals_r("y2");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 64;
          for (int sym2__ = 1; sym2__ <= p2; ++sym2__) {
            current_statement__ = 64;
            stan::model::assign(y2, y2_flat__[(pos__ - 1)],
              "assigning variable y2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 64;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 65;
      stan::math::validate_non_negative_index("y3", "p3", p3);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("y3", "n", n);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "y3", "double",
        std::vector<size_t>{static_cast<size_t>(p3), static_cast<size_t>(n)});
      y3_data__ = Eigen::Matrix<double,-1,-1>::Constant(p3, n,
                    std::numeric_limits<double>::quiet_NaN());
      new (&y3) Eigen::Map<Eigen::Matrix<double,-1,-1>>(y3_data__.data(), p3,
        n);
      {
        std::vector<local_scalar_t__> y3_flat__;
        current_statement__ = 67;
        y3_flat__ = context__.vals_r("y3");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 67;
          for (int sym2__ = 1; sym2__ <= p3; ++sym2__) {
            current_statement__ = 67;
            stan::model::assign(y3, y3_flat__[(pos__ - 1)],
              "assigning variable y3", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 67;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 68;
      stan::math::validate_non_negative_index("y4", "p4", p4);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("y4", "n", n);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "y4", "double",
        std::vector<size_t>{static_cast<size_t>(p4), static_cast<size_t>(n)});
      y4_data__ = Eigen::Matrix<double,-1,-1>::Constant(p4, n,
                    std::numeric_limits<double>::quiet_NaN());
      new (&y4) Eigen::Map<Eigen::Matrix<double,-1,-1>>(y4_data__.data(), p4,
        n);
      {
        std::vector<local_scalar_t__> y4_flat__;
        current_statement__ = 70;
        y4_flat__ = context__.vals_r("y4");
        current_statement__ = 70;
        pos__ = 1;
        current_statement__ = 70;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 70;
          for (int sym2__ = 1; sym2__ <= p4; ++sym2__) {
            current_statement__ = 70;
            stan::model::assign(y4, y4_flat__[(pos__ - 1)],
              "assigning variable y4", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 70;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 71;
      stan::math::validate_non_negative_index("y5", "p5", p5);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("y5", "n", n);
      current_statement__ = 73;
      context__.validate_dims("data initialization", "y5", "double",
        std::vector<size_t>{static_cast<size_t>(p5), static_cast<size_t>(n)});
      y5_data__ = Eigen::Matrix<double,-1,-1>::Constant(p5, n,
                    std::numeric_limits<double>::quiet_NaN());
      new (&y5) Eigen::Map<Eigen::Matrix<double,-1,-1>>(y5_data__.data(), p5,
        n);
      {
        std::vector<local_scalar_t__> y5_flat__;
        current_statement__ = 73;
        y5_flat__ = context__.vals_r("y5");
        current_statement__ = 73;
        pos__ = 1;
        current_statement__ = 73;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 73;
          for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
            current_statement__ = 73;
            stan::model::assign(y5, y5_flat__[(pos__ - 1)],
              "assigning variable y5", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 73;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 74;
      context__.validate_dims("data initialization", "mu5", "double",
        std::vector<size_t>{});
      mu5 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 74;
      mu5 = context__.vals_r("mu5")[(1 - 1)];
      current_statement__ = 75;
      stan::math::validate_non_negative_index("m1", "p1", p1);
      current_statement__ = 76;
      stan::math::validate_positive_index("m1", "p5", p5);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("m2", "p2", p2);
      current_statement__ = 78;
      stan::math::validate_positive_index("m2", "p5", p5);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("m3", "p3", p3);
      current_statement__ = 80;
      stan::math::validate_positive_index("m3", "p5", p5);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("m4", "p4", p4);
      current_statement__ = 82;
      stan::math::validate_positive_index("m4", "p5", p5);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("mt1", "p5", p5);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("mt1", "p1", p1);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("mt2", "p5", p5);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("mt2", "p2", p2);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("mt3", "p5", p5);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("mt3", "p3", p3);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("mt4", "p5", p5);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("mt4", "p4", p4);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("mx1", "p5", p5);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("mx1", "n", n);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("mx2", "p5", p5);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("mx2", "n", n);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("mx3", "p5", p5);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("mx3", "n", n);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("mx4", "p5", p5);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("mx4", "n", n);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("mx", "p5", p5);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("mx", "n", n);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("log_lik", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + (p1 * (p5 - 1)) + (p2 * (p5 - 1)) + (p3
      * (p5 - 1)) + (p4 * (p5 - 1));
  }
  inline std::string model_name() const final {
    return "model_compDAG4";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_compDAG4_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ pi1 = DUMMY_VAR__;
      current_statement__ = 1;
      pi1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ pi2 = DUMMY_VAR__;
      current_statement__ = 2;
      pi2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ pi3 = DUMMY_VAR__;
      current_statement__ = 3;
      pi3 = in__.template read<local_scalar_t__>();
      local_scalar_t__ pi4 = DUMMY_VAR__;
      current_statement__ = 4;
      pi4 = in__.template read<local_scalar_t__>();
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m1 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p1,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      current_statement__ = 5;
      m1 = in__.template read_constrain_simplex<
             std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
             jacobian__>(lp__, p1, p5);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m2 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p2,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      current_statement__ = 6;
      m2 = in__.template read_constrain_simplex<
             std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
             jacobian__>(lp__, p2, p5);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m3 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p3,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      current_statement__ = 7;
      m3 = in__.template read_constrain_simplex<
             std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
             jacobian__>(lp__, p3, p5);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m4 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p4,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      current_statement__ = 8;
      m4 = in__.template read_constrain_simplex<
             std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
             jacobian__>(lp__, p4, p5);
      Eigen::Matrix<local_scalar_t__,-1,-1> mt1 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p5, p1, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> mt2 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p5, p2, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> mt3 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p5, p3, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> mt4 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p5, p4, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> mx1 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p5, n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> mx2 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p5, n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> mx3 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p5, n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> mx4 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p5, n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> mx =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p5, n, DUMMY_VAR__);
      current_statement__ = 21;
      for (int i = 1; i <= p1; ++i) {
        current_statement__ = 19;
        stan::model::assign(mt1,
          stan::model::rvalue(m1, "m1", stan::model::index_uni(i)),
          "assigning variable mt1", stan::model::index_omni(),
          stan::model::index_uni(i));
      }
      current_statement__ = 24;
      for (int i = 1; i <= p2; ++i) {
        current_statement__ = 22;
        stan::model::assign(mt2,
          stan::model::rvalue(m2, "m2", stan::model::index_uni(i)),
          "assigning variable mt2", stan::model::index_omni(),
          stan::model::index_uni(i));
      }
      current_statement__ = 27;
      for (int i = 1; i <= p3; ++i) {
        current_statement__ = 25;
        stan::model::assign(mt3,
          stan::model::rvalue(m3, "m3", stan::model::index_uni(i)),
          "assigning variable mt3", stan::model::index_omni(),
          stan::model::index_uni(i));
      }
      current_statement__ = 30;
      for (int i = 1; i <= p4; ++i) {
        current_statement__ = 28;
        stan::model::assign(mt4,
          stan::model::rvalue(m4, "m4", stan::model::index_uni(i)),
          "assigning variable mt4", stan::model::index_omni(),
          stan::model::index_uni(i));
      }
      current_statement__ = 31;
      stan::model::assign(mx1,
        stan::math::multiply(stan::math::multiply(pi1, mt1), y1),
        "assigning variable mx1");
      current_statement__ = 32;
      stan::model::assign(mx2,
        stan::math::multiply(stan::math::multiply(pi2, mt2), y2),
        "assigning variable mx2");
      current_statement__ = 33;
      stan::model::assign(mx3,
        stan::math::multiply(stan::math::multiply(pi3, mt3), y3),
        "assigning variable mx3");
      current_statement__ = 34;
      stan::model::assign(mx4,
        stan::math::multiply(stan::math::multiply(pi4, mt4), y4),
        "assigning variable mx4");
      current_statement__ = 35;
      stan::model::assign(mx,
        stan::math::add(stan::math::add(stan::math::add(mx1, mx2), mx3), mx4),
        "assigning variable mx");
      {
        current_statement__ = 38;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(pi1, 1, 1));
        current_statement__ = 39;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(pi2, 1, 1));
        current_statement__ = 40;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(pi3, 1, 1));
        current_statement__ = 41;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(pi4, 1, 1));
        current_statement__ = 43;
        for (int j = 1; j <= p1; ++j) {
          current_statement__ = 42;
          lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(
                           stan::model::rvalue(m1, "m1",
                             stan::model::index_uni(j)),
                           stan::math::rep_vector((1.0 / p5), p5)));
        }
        current_statement__ = 45;
        for (int j = 1; j <= p2; ++j) {
          current_statement__ = 44;
          lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(
                           stan::model::rvalue(m2, "m2",
                             stan::model::index_uni(j)),
                           stan::math::rep_vector((1.0 / p5), p5)));
        }
        current_statement__ = 47;
        for (int j = 1; j <= p3; ++j) {
          current_statement__ = 46;
          lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(
                           stan::model::rvalue(m3, "m3",
                             stan::model::index_uni(j)),
                           stan::math::rep_vector((1.0 / p5), p5)));
        }
        current_statement__ = 49;
        for (int j = 1; j <= p4; ++j) {
          current_statement__ = 48;
          lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(
                           stan::model::rvalue(m4, "m4",
                             stan::model::index_uni(j)),
                           stan::math::rep_vector((1.0 / p5), p5)));
        }
        current_statement__ = 52;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 50;
          lp_accum__.add(stan::math::dirichlet_lpdf<false>(
                           stan::model::rvalue(y5, "y5",
                             stan::model::index_omni(),
                             stan::model::index_uni(i)),
                           stan::math::add(
                             stan::model::rvalue(mx, "mx",
                               stan::model::index_omni(),
                               stan::model::index_uni(i)), mu5)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_compDAG4_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double pi1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      pi1 = in__.template read<local_scalar_t__>();
      double pi2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      pi2 = in__.template read<local_scalar_t__>();
      double pi3 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      pi3 = in__.template read<local_scalar_t__>();
      double pi4 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      pi4 = in__.template read<local_scalar_t__>();
      std::vector<Eigen::Matrix<double,-1,1>> m1 =
        std::vector<Eigen::Matrix<double,-1,1>>(p1,
          Eigen::Matrix<double,-1,1>::Constant(p5,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 5;
      m1 = in__.template read_constrain_simplex<
             std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
             jacobian__>(lp__, p1, p5);
      std::vector<Eigen::Matrix<double,-1,1>> m2 =
        std::vector<Eigen::Matrix<double,-1,1>>(p2,
          Eigen::Matrix<double,-1,1>::Constant(p5,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      m2 = in__.template read_constrain_simplex<
             std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
             jacobian__>(lp__, p2, p5);
      std::vector<Eigen::Matrix<double,-1,1>> m3 =
        std::vector<Eigen::Matrix<double,-1,1>>(p3,
          Eigen::Matrix<double,-1,1>::Constant(p5,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 7;
      m3 = in__.template read_constrain_simplex<
             std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
             jacobian__>(lp__, p3, p5);
      std::vector<Eigen::Matrix<double,-1,1>> m4 =
        std::vector<Eigen::Matrix<double,-1,1>>(p4,
          Eigen::Matrix<double,-1,1>::Constant(p5,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 8;
      m4 = in__.template read_constrain_simplex<
             std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
             jacobian__>(lp__, p4, p5);
      Eigen::Matrix<double,-1,-1> mt1 =
        Eigen::Matrix<double,-1,-1>::Constant(p5, p1,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> mt2 =
        Eigen::Matrix<double,-1,-1>::Constant(p5, p2,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> mt3 =
        Eigen::Matrix<double,-1,-1>::Constant(p5, p3,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> mt4 =
        Eigen::Matrix<double,-1,-1>::Constant(p5, p4,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> mx1 =
        Eigen::Matrix<double,-1,-1>::Constant(p5, n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> mx2 =
        Eigen::Matrix<double,-1,-1>::Constant(p5, n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> mx3 =
        Eigen::Matrix<double,-1,-1>::Constant(p5, n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> mx4 =
        Eigen::Matrix<double,-1,-1>::Constant(p5, n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> mx =
        Eigen::Matrix<double,-1,-1>::Constant(p5, n,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(pi1);
      out__.write(pi2);
      out__.write(pi3);
      out__.write(pi4);
      for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p1; ++sym2__) {
          out__.write(m1[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p2; ++sym2__) {
          out__.write(m2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p3; ++sym2__) {
          out__.write(m3[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p4; ++sym2__) {
          out__.write(m4[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 21;
      for (int i = 1; i <= p1; ++i) {
        current_statement__ = 19;
        stan::model::assign(mt1,
          stan::model::rvalue(m1, "m1", stan::model::index_uni(i)),
          "assigning variable mt1", stan::model::index_omni(),
          stan::model::index_uni(i));
      }
      current_statement__ = 24;
      for (int i = 1; i <= p2; ++i) {
        current_statement__ = 22;
        stan::model::assign(mt2,
          stan::model::rvalue(m2, "m2", stan::model::index_uni(i)),
          "assigning variable mt2", stan::model::index_omni(),
          stan::model::index_uni(i));
      }
      current_statement__ = 27;
      for (int i = 1; i <= p3; ++i) {
        current_statement__ = 25;
        stan::model::assign(mt3,
          stan::model::rvalue(m3, "m3", stan::model::index_uni(i)),
          "assigning variable mt3", stan::model::index_omni(),
          stan::model::index_uni(i));
      }
      current_statement__ = 30;
      for (int i = 1; i <= p4; ++i) {
        current_statement__ = 28;
        stan::model::assign(mt4,
          stan::model::rvalue(m4, "m4", stan::model::index_uni(i)),
          "assigning variable mt4", stan::model::index_omni(),
          stan::model::index_uni(i));
      }
      current_statement__ = 31;
      stan::model::assign(mx1,
        stan::math::multiply(stan::math::multiply(pi1, mt1), y1),
        "assigning variable mx1");
      current_statement__ = 32;
      stan::model::assign(mx2,
        stan::math::multiply(stan::math::multiply(pi2, mt2), y2),
        "assigning variable mx2");
      current_statement__ = 33;
      stan::model::assign(mx3,
        stan::math::multiply(stan::math::multiply(pi3, mt3), y3),
        "assigning variable mx3");
      current_statement__ = 34;
      stan::model::assign(mx4,
        stan::math::multiply(stan::math::multiply(pi4, mt4), y4),
        "assigning variable mx4");
      current_statement__ = 35;
      stan::model::assign(mx,
        stan::math::add(stan::math::add(stan::math::add(mx1, mx2), mx3), mx4),
        "assigning variable mx");
      if (emit_transformed_parameters__) {
        out__.write(mt1);
        out__.write(mt2);
        out__.write(mt3);
        out__.write(mt4);
        out__.write(mx1);
        out__.write(mx2);
        out__.write(mx3);
        out__.write(mx4);
        out__.write(mx);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 37;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 36;
        stan::model::assign(log_lik,
          stan::math::dirichlet_lpdf<false>(
            stan::model::rvalue(y5, "y5", stan::model::index_omni(),
              stan::model::index_uni(i)),
            stan::math::add(
              stan::model::rvalue(mx, "mx", stan::model::index_omni(),
                stan::model::index_uni(i)), mu5)),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ pi1 = DUMMY_VAR__;
      current_statement__ = 1;
      pi1 = in__.read<local_scalar_t__>();
      out__.write(pi1);
      local_scalar_t__ pi2 = DUMMY_VAR__;
      current_statement__ = 2;
      pi2 = in__.read<local_scalar_t__>();
      out__.write(pi2);
      local_scalar_t__ pi3 = DUMMY_VAR__;
      current_statement__ = 3;
      pi3 = in__.read<local_scalar_t__>();
      out__.write(pi3);
      local_scalar_t__ pi4 = DUMMY_VAR__;
      current_statement__ = 4;
      pi4 = in__.read<local_scalar_t__>();
      out__.write(pi4);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m1 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p1,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= p1; ++sym2__) {
          current_statement__ = 5;
          stan::model::assign(m1, in__.read<local_scalar_t__>(),
            "assigning variable m1", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_simplex(m1);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m2 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p2,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= p2; ++sym2__) {
          current_statement__ = 6;
          stan::model::assign(m2, in__.read<local_scalar_t__>(),
            "assigning variable m2", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_simplex(m2);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m3 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p3,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= p3; ++sym2__) {
          current_statement__ = 7;
          stan::model::assign(m3, in__.read<local_scalar_t__>(),
            "assigning variable m3", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_simplex(m3);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m4 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p4,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= p4; ++sym2__) {
          current_statement__ = 8;
          stan::model::assign(m4, in__.read<local_scalar_t__>(),
            "assigning variable m4", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_simplex(m4);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "pi1", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "pi2", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "pi3", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "pi4", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "m1", "double",
        std::vector<size_t>{static_cast<size_t>(p1), static_cast<size_t>(p5)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "m2", "double",
        std::vector<size_t>{static_cast<size_t>(p2), static_cast<size_t>(p5)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "m3", "double",
        std::vector<size_t>{static_cast<size_t>(p3), static_cast<size_t>(p5)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "m4", "double",
        std::vector<size_t>{static_cast<size_t>(p4), static_cast<size_t>(p5)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ pi1 = DUMMY_VAR__;
      current_statement__ = 1;
      pi1 = context__.vals_r("pi1")[(1 - 1)];
      out__.write(pi1);
      local_scalar_t__ pi2 = DUMMY_VAR__;
      current_statement__ = 2;
      pi2 = context__.vals_r("pi2")[(1 - 1)];
      out__.write(pi2);
      local_scalar_t__ pi3 = DUMMY_VAR__;
      current_statement__ = 3;
      pi3 = context__.vals_r("pi3")[(1 - 1)];
      out__.write(pi3);
      local_scalar_t__ pi4 = DUMMY_VAR__;
      current_statement__ = 4;
      pi4 = context__.vals_r("pi4")[(1 - 1)];
      out__.write(pi4);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m1 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p1,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> m1_flat__;
        current_statement__ = 5;
        m1_flat__ = context__.vals_r("m1");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= p1; ++sym2__) {
            current_statement__ = 5;
            stan::model::assign(m1, m1_flat__[(pos__ - 1)],
              "assigning variable m1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_simplex(m1);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m2 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p2,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> m2_flat__;
        current_statement__ = 6;
        m2_flat__ = context__.vals_r("m2");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= p2; ++sym2__) {
            current_statement__ = 6;
            stan::model::assign(m2, m2_flat__[(pos__ - 1)],
              "assigning variable m2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_simplex(m2);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m3 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p3,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> m3_flat__;
        current_statement__ = 7;
        m3_flat__ = context__.vals_r("m3");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= p3; ++sym2__) {
            current_statement__ = 7;
            stan::model::assign(m3, m3_flat__[(pos__ - 1)],
              "assigning variable m3", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_simplex(m3);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m4 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(p4,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p5, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> m4_flat__;
        current_statement__ = 8;
        m4_flat__ = context__.vals_r("m4");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= p4; ++sym2__) {
            current_statement__ = 8;
            stan::model::assign(m4, m4_flat__[(pos__ - 1)],
              "assigning variable m4", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 8;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_simplex(m4);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"pi1", "pi2", "pi3", "pi4", "m1",
                "m2", "m3", "m4"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"mt1", "mt2", "mt3", "mt4", "mx1", "mx2", "mx3", "mx4", "mx"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p1),
                  static_cast<size_t>(p5)},
                std::vector<size_t>{static_cast<size_t>(p2),
                  static_cast<size_t>(p5)},
                std::vector<size_t>{static_cast<size_t>(p3),
                  static_cast<size_t>(p5)},
                std::vector<size_t>{static_cast<size_t>(p4),
                  static_cast<size_t>(p5)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(p5),
               static_cast<size_t>(p1)},
             std::vector<size_t>{static_cast<size_t>(p5),
               static_cast<size_t>(p2)},
             std::vector<size_t>{static_cast<size_t>(p5),
               static_cast<size_t>(p3)},
             std::vector<size_t>{static_cast<size_t>(p5),
               static_cast<size_t>(p4)},
             std::vector<size_t>{static_cast<size_t>(p5),
               static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(p5),
               static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(p5),
               static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(p5),
               static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(p5),
               static_cast<size_t>(n)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "pi1");
    param_names__.emplace_back(std::string() + "pi2");
    param_names__.emplace_back(std::string() + "pi3");
    param_names__.emplace_back(std::string() + "pi4");
    for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= p1; ++sym2__) {
        param_names__.emplace_back(std::string() + "m1" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= p2; ++sym2__) {
        param_names__.emplace_back(std::string() + "m2" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= p3; ++sym2__) {
        param_names__.emplace_back(std::string() + "m3" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= p5; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= p4; ++sym2__) {
        param_names__.emplace_back(std::string() + "m4" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= p1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mt1" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= p2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mt2" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= p3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mt3" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= p4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mt4" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mx1" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mx2" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mx3" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mx4" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mx" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "pi1");
    param_names__.emplace_back(std::string() + "pi2");
    param_names__.emplace_back(std::string() + "pi3");
    param_names__.emplace_back(std::string() + "pi4");
    for (int sym1__ = 1; sym1__ <= (p5 - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= p1; ++sym2__) {
        param_names__.emplace_back(std::string() + "m1" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= (p5 - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= p2; ++sym2__) {
        param_names__.emplace_back(std::string() + "m2" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= (p5 - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= p3; ++sym2__) {
        param_names__.emplace_back(std::string() + "m3" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= (p5 - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= p4; ++sym2__) {
        param_names__.emplace_back(std::string() + "m4" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= p1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mt1" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= p2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mt2" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= p3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mt3" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= p4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mt4" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mx1" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mx2" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mx3" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mx4" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p5; ++sym2__) {
          param_names__.emplace_back(std::string() + "mx" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"pi1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pi2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pi3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pi4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(p5) + "}},\"block\":\"parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(p5) + "}},\"block\":\"parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(p5) + "}},\"block\":\"parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p4) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(p5) + "}},\"block\":\"parameters\"},{\"name\":\"mt1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(p1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mt2\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(p2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mt3\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(p3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mt4\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(p4) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mx1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mx2\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mx3\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mx4\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"pi1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pi2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pi3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pi4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((p5 -1)) + "}},\"block\":\"parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((p5 -1)) + "}},\"block\":\"parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((p5 -1)) + "}},\"block\":\"parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(p4) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((p5 -1)) + "}},\"block\":\"parameters\"},{\"name\":\"mt1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(p1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mt2\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(p2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mt3\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(p3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mt4\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(p4) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mx1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mx2\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mx3\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mx4\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p5) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + 1) + 1) + 1) + (p1 * p5)) + (p2 *
      p5)) + (p3 * p5)) + (p4 * p5));
    const size_t num_transformed = emit_transformed_parameters * ((((((((((p5
      * p1) + (p5 * p2)) + (p5 * p3)) + (p5 * p4)) + (p5 * n)) + (p5 * n)) +
      (p5 * n)) + (p5 * n)) + (p5 * n)));
    const size_t num_gen_quantities = emit_generated_quantities * (n);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + 1) + 1) + 1) + (p1 * p5)) + (p2 *
      p5)) + (p3 * p5)) + (p4 * p5));
    const size_t num_transformed = emit_transformed_parameters * ((((((((((p5
      * p1) + (p5 * p2)) + (p5 * p3)) + (p5 * p4)) + (p5 * n)) + (p5 * n)) +
      (p5 * n)) + (p5 * n)) + (p5 * n)));
    const size_t num_gen_quantities = emit_generated_quantities * (n);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_compDAG4_namespace::model_compDAG4;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_compDAG4_namespace::profiles__;
}
#endif
#endif
